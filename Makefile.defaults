.PHONY: diff check

LLVM_BASE = ../../../llvm/build/Debug+Asserts
# LLVM_BIN  = 

# LLVM_BASE = /rsgs/scratch0/linhai88/llvm/llvm-3.3/build/Release+Asserts
LLVM_BIN  = $(LLVM_BASE)/bin/

LDFLAGS=
CFLAGS=$(OPTIMIZATION) $(BENCH_FLAGS) -emit-llvm -c -w
ifeq ($(BENCHLANG),C)
	OBJECTS=$(SOURCES:.c=.o)
else
	OBJECTS=$(SOURCES:.cc=.o)
endif

OPTFLAGS       = -load
POST_OPT_FLAGS = -always-inline -inline
OPTLIB         = LLVMHello.dylib

APPLICATION    = $(NAME)
CC             = $(LLVM_BIN)clang
CXX            = $(LLVM_BIN)clang
LD             = $(LLVM_BIN)llvm-link
OPT            = $(LLVM_BIN)opt
LLC            = $(LLVM_BIN)llc -disable-cfi
LLVM-DIS       = $(LLVM_BIN)llvm-dis
MATHLIBOPT     = -lm

ifdef NEED_MATH
MATH_LIBS      = $(MATHLIBOPT)
endif

BYTECODE       = $(APPLICATION).bc
QED_BYTECODE   = $(APPLICATION)-qed.bc

EXECUTABLE     = $(APPLICATION).native
QED_EXECUTABLE = $(APPLICATION)-qed.native

ASSEMBLY       = $(APPLICATION).s
QED_ASSEMBLY   = $(APPLICATION)-qed.s

DIS            = $(APPLICATION).ll
QED_DIS        = $(APPLICATION)-qed.ll

all: $(SOURCES) $(BYTECODE) $(QED_BYTECODE) $(ASSEMBLY) $(QED_ASSEMBLY) $(EXECUTABLE) $(QED_EXECUTABLE)

$(EXECUTABLE): $(ASSEMBLY)
	$(CC) $(ASSEMBLY) $(MATH_LIBS) $(BENCH_FLAGS) -o $@

$(QED_EXECUTABLE): $(QED_ASSEMBLY)
	$(CC) $(QED_ASSEMBLY) $(MATH_LIBS) $(BENCH_FLAGS) -o $@

$(ASSEMBLY): $(BYTECODE)
	$(LLC) $(OPTIMIZATION) $(BYTECODE) -o $@

$(QED_ASSEMBLY): $(QED_BYTECODE)
	$(LLC) $(OPTIMIZATION) $(QED_BYTECODE) -o $@

$(QED_BYTECODE): $(BYTECODE)
	$(OPT) $(OPTFLAGS) $(OPTLIB) -hello -QED-Mode=$(QED_MODE) -NUM-CFTSS-BB=$(NUM_CFTSS_BB) $(BYTECODE) -o $@
	# $(OPT) $(POST_OPT_FLAGS) $(QED_BYTECODE) -o $@

$(BYTECODE): $(OBJECTS)
	$(LD) $(LDFLAGS) $(OBJECTS) -o $@
	$(OPT) -instcombine $(BYTECODE) -o $@

.c.o:
	$(CC) $(CFLAGS) $< -o $@

.cpp.o:
	$(CC) $(CFLAGS) $< -o $@

.cc.o:
	$(CXX) $(CFLAGS) $< -o $@

clean:
	rm -fr *.bc *.ll *.s *.out *.native *.o *.asm

clear:
	rm -fr $(QED_BYTECODE)

display: $(DIS) $(QED_DIS)

$(DIS): $(BYTECODE)
	$(LLVM-DIS)	$(BYTECODE) -o $@

$(QED_DIS): $(QED_BYTECODE)
	$(LLVM-DIS)	$(QED_BYTECODE) -o $@

run_qed: $(QED_EXECUTABLE)
	./$(QED_EXECUTABLE) $(RUN_PARAMS)

run: $(EXECUTABLE)
	./$(EXECUTABLE) $(RUN_PARAMS)

diff: $(EXECUTABLE) $(QED_EXECUTABLE)
	diff -s <(make run) <(make run_qed)

# Diffs the outputs of the two executable files.
# diff: $(EXECUTABLE) $(QED_EXECUTABLE)
# 	./$(EXECUTABLE) &> test_native
# 	./$(QED_EXECUTABLE) &> test-qed_native
# 	diff -s test_native test-qed_native
# 	rm test_native test-qed_native

# Runs the QED-transformed program with each of the arguments provided in TEST_ARGS.
# Then, scans for failure of QED somewhere in the program.
check: $(QED_EXECUTABLE)
ifdef TEST_ARGS
	$(foreach TEST, $(TEST_ARGS), ./$(QED_EXECUTABLE) $(TEST) >> test_check 2>&1;)
	@cat test_check
	grep -v "EDDI failed." test_check > /dev/null
	grep -v "CFCSS failed." test_check > /dev/null
	rm test_check
else
	$(error No arguments supplied to this Makefile)
endif
