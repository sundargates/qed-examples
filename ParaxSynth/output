; ModuleID = '<stdin>'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.8.0"

@buffer = global [1000 x i8] zeroinitializer, align 16
@checksum = global [1 x i64] zeroinitializer, align 8
@datawidth = global i32 2, align 4
@stride = global i32 0, align 4
@counters = global i32 0, align 4
@iters = global i32 10, align 4
@.str = private unnamed_addr constant [9 x i8] c"%d %lld\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()* }] [{ i32, void ()* } { i32 65535, void ()* @_GLOBAL__I_a }]

define internal void @__cxx_global_var_init() section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %0 = load i32* @datawidth, align 4
  %mul = mul nsw i32 1, %0
  store i32 %mul, i32* @stride, align 4
  ret void
}

define internal void @__cxx_global_var_init1() section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %0 = load i32* @datawidth, align 4
  %div = sdiv i32 1000, %0
  %div1 = sdiv i32 %div, 1
  store i32 %div1, i32* @counters, align 4
  ret void
}

define void @_Z4Testi(i32 %id) #0 {
entry:
  %id.addr = alloca i32, align 4
  %pbuffer = alloca i8*, align 8
  %pchecksum = alloca i8*, align 8
  %i = alloca i32, align 4
  %pcounter = alloca i8*, align 8
  %j = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  %0 = load i32* @datawidth, align 4
  %1 = load i32* %id.addr, align 4
  %mul = mul nsw i32 %0, %1
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8* getelementptr inbounds ([1000 x i8]* @buffer, i32 0, i32 0), i64 %idx.ext
  store i8* %add.ptr, i8** %pbuffer, align 8
  %2 = load i32* @datawidth, align 4
  %3 = load i32* %id.addr, align 4
  %mul1 = mul nsw i32 %2, %3
  %idx.ext2 = sext i32 %mul1 to i64
  %add.ptr3 = getelementptr inbounds i8* bitcast ([1 x i64]* @checksum to i8*), i64 %idx.ext2
  store i8* %add.ptr3, i8** %pchecksum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %4 = load i32* %i, align 4
  %5 = load i32* @iters, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %6 = load i8** %pbuffer, align 8
  store i8* %6, i8** %pcounter, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %7 = load i32* %j, align 4
  %8 = load i32* @counters, align 4
  %cmp5 = icmp ult i32 %7, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %9 = load i32* @datawidth, align 4
  switch i32 %9, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb7
    i32 4, label %sw.bb8
  ]

sw.bb:                                            ; preds = %for.body6
  %10 = load i8** %pcounter, align 8
  call void asm sideeffect "incb ($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* %10) #5, !srcloc !0
  %11 = load i8** %pchecksum, align 8
  call void asm sideeffect "incb ($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* %11) #5, !srcloc !1
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body6
  %12 = load i8** %pcounter, align 8
  call void asm sideeffect "incw ($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* %12) #5, !srcloc !2
  %13 = load i8** %pchecksum, align 8
  call void asm sideeffect "incw ($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* %13) #5, !srcloc !3
  br label %sw.epilog

sw.bb8:                                           ; preds = %for.body6
  %14 = load i8** %pcounter, align 8
  call void asm sideeffect "incl ($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* %14) #5, !srcloc !4
  %15 = load i8** %pchecksum, align 8
  call void asm sideeffect "incl ($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* %15) #5, !srcloc !5
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb8, %sw.bb7, %sw.bb, %for.body6
  %16 = load i32* @stride, align 4
  %17 = load i8** %pcounter, align 8
  %idx.ext9 = sext i32 %16 to i64
  %add.ptr10 = getelementptr inbounds i8* %17, i64 %idx.ext9
  store i8* %add.ptr10, i8** %pcounter, align 8
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %18 = load i32* %j, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %19 = load i32* %i, align 4
  %inc12 = add i32 %19, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

define i32 @_Z13CompareNBytesyPhi(i64 %a, i8* %b, i32 %n) #1 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  %b.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32* %n.addr, align 4
  switch i32 %0, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb1
    i32 4, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry
  %1 = load i64* %a.addr, align 8
  %conv = trunc i64 %1 to i8
  %2 = load i8** %b.addr, align 8
  %3 = load i8* %2, align 1
  %call = call i32 @_Z7CompareIhEiT_S0_(i8 zeroext %conv, i8 zeroext %3)
  store i32 %call, i32* %retval
  br label %return

sw.bb1:                                           ; preds = %entry
  %4 = load i64* %a.addr, align 8
  %conv2 = trunc i64 %4 to i16
  %5 = load i8** %b.addr, align 8
  %6 = bitcast i8* %5 to i16*
  %7 = load i16* %6, align 2
  %call3 = call i32 @_Z7CompareItEiT_S0_(i16 zeroext %conv2, i16 zeroext %7)
  store i32 %call3, i32* %retval
  br label %return

sw.bb4:                                           ; preds = %entry
  %8 = load i64* %a.addr, align 8
  %conv5 = trunc i64 %8 to i32
  %9 = load i8** %b.addr, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %10, align 4
  %call6 = call i32 @_Z7CompareIjEiT_S0_(i32 %conv5, i32 %11)
  store i32 %call6, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb4, %sw.bb1, %sw.bb
  %12 = load i32* %retval
  ret i32 %12
}

define linkonce_odr i32 @_Z7CompareIhEiT_S0_(i8 zeroext %a, i8 zeroext %b) #2 {
entry:
  %a.addr = alloca i8, align 1
  %b.addr = alloca i8, align 1
  store i8 %a, i8* %a.addr, align 1
  store i8 %b, i8* %b.addr, align 1
  %0 = load i8* %b.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8* %a.addr, align 1
  %conv1 = zext i8 %1 to i32
  %sub = sub nsw i32 %conv, %conv1
  ret i32 %sub
}

define linkonce_odr i32 @_Z7CompareItEiT_S0_(i16 zeroext %a, i16 zeroext %b) #2 {
entry:
  %a.addr = alloca i16, align 2
  %b.addr = alloca i16, align 2
  store i16 %a, i16* %a.addr, align 2
  store i16 %b, i16* %b.addr, align 2
  %0 = load i16* %b.addr, align 2
  %conv = zext i16 %0 to i32
  %1 = load i16* %a.addr, align 2
  %conv1 = zext i16 %1 to i32
  %sub = sub nsw i32 %conv, %conv1
  ret i32 %sub
}

define linkonce_odr i32 @_Z7CompareIjEiT_S0_(i32 %a, i32 %b) #2 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32* %b.addr, align 4
  %1 = load i32* %a.addr, align 4
  %sub = sub i32 %0, %1
  ret i32 %sub
}

define i32 @_Z5Checki(i32 %id) #3 {
entry:
  %retval = alloca i32, align 4
  %id.addr = alloca i32, align 4
  %pchecksum = alloca i8*, align 8
  %checksumExpected = alloca i64, align 8
  %res = alloca i32, align 4
  %pcounter = alloca i8*, align 8
  %counterExpected = alloca i64, align 8
  %j = alloca i32, align 4
  %res8 = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  %0 = load i32* @datawidth, align 4
  %1 = load i32* %id.addr, align 4
  %mul = mul nsw i32 %0, %1
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8* bitcast ([1 x i64]* @checksum to i8*), i64 %idx.ext
  store i8* %add.ptr, i8** %pchecksum, align 8
  %2 = load i32* @counters, align 4
  %3 = load i32* @iters, align 4
  %mul1 = mul nsw i32 %2, %3
  %conv = sext i32 %mul1 to i64
  store i64 %conv, i64* %checksumExpected, align 8
  %4 = load i8** %pchecksum, align 8
  %5 = bitcast i8* %4 to i16*
  %6 = load i16* %5, align 2
  %conv2 = zext i16 %6 to i32
  %7 = load i64* %checksumExpected, align 8
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([9 x i8]* @.str, i32 0, i32 0), i32 %conv2, i64 %7)
  %8 = load i64* %checksumExpected, align 8
  %9 = load i8** %pchecksum, align 8
  %10 = load i32* @datawidth, align 4
  %call3 = call i32 @_Z13CompareNBytesyPhi(i64 %8, i8* %9, i32 %10)
  store i32 %call3, i32* %res, align 4
  %11 = load i32* %res, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load i32* @counters, align 4
  store i32 %12, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %13 = load i32* @datawidth, align 4
  %14 = load i32* %id.addr, align 4
  %mul4 = mul nsw i32 %13, %14
  %idx.ext5 = sext i32 %mul4 to i64
  %add.ptr6 = getelementptr inbounds i8* getelementptr inbounds ([1000 x i8]* @buffer, i32 0, i32 0), i64 %idx.ext5
  store i8* %add.ptr6, i8** %pcounter, align 8
  %15 = load i32* @iters, align 4
  %conv7 = sext i32 %15 to i64
  store i64 %conv7, i64* %counterExpected, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load i32* %j, align 4
  %17 = load i32* @counters, align 4
  %cmp = icmp ult i32 %16, %17
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i64* %counterExpected, align 8
  %19 = load i8** %pcounter, align 8
  %20 = load i32* @datawidth, align 4
  %call9 = call i32 @_Z13CompareNBytesyPhi(i64 %18, i8* %19, i32 %20)
  store i32 %call9, i32* %res8, align 4
  %21 = load i32* %res8, align 4
  %tobool10 = icmp ne i32 %21, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  %22 = load i32* %j, align 4
  store i32 %22, i32* %retval
  br label %return

if.end12:                                         ; preds = %for.body
  %23 = load i32* @stride, align 4
  %24 = load i8** %pcounter, align 8
  %idx.ext13 = sext i32 %23 to i64
  %add.ptr14 = getelementptr inbounds i8* %24, i64 %idx.ext13
  store i8* %add.ptr14, i8** %pcounter, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %25 = load i32* %j, align 4
  %inc = add i32 %25, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then11, %if.then
  %26 = load i32* %retval
  ret i32 %26
}

declare i32 @printf(i8*, ...) #4

define void @_Z10initializev() #2 {
entry:
  call void @llvm.memset.p0i8.i64(i8* getelementptr inbounds ([1000 x i8]* @buffer, i32 0, i32 0), i8 0, i64 1000, i32 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* bitcast ([1 x i64]* @checksum to i8*), i8 0, i64 1000, i32 8, i1 false)
  ret void
}

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #5

define i32 @main() #1 {
entry:
  %retval = alloca i32, align 4
  %id = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 0, i32* %id, align 4
  %0 = load i32* %id, align 4
  call void @_Z4Testi(i32 %0)
  %1 = load i32* %id, align 4
  %call = call i32 @_Z5Checki(i32 %1)
  ret i32 %call
}

define internal void @_GLOBAL__I_a() section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  call void @__cxx_global_var_init()
  call void @__cxx_global_var_init1()
  ret void
}

attributes #0 = { noinline nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!0 = metadata !{i32 842}
!1 = metadata !{i32 887}
!2 = metadata !{i32 971}
!3 = metadata !{i32 1016}
!4 = metadata !{i32 1096}
!5 = metadata !{i32 1141}
