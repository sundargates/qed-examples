#!/usr/bin/env python

# testingcreator.py, Arun Debray. July 2013
# Generate files full of function calls for testing.

# I used this to make large numbers of test files for testing CFCSS with function calls.
# It makes a large number of randomly generated files with lots of function calls for
# large, automated tests.

import sys
import time
import random

def usage():
	print 'Usage: ./testingcreator.py a b c d e (f)'
	print 'where: a is the number of files to create'
	print '       b is the minimum number of functions per file'
	print '       c is the maximum number'
	print '       d is the minimum number of calls per function'
	print '       e is the maximum number'
	print '       f is the file prefix (optional)'

#functions identified by number. Here is the string name
def getName(n):
	return 'i' + str(n)

def writeGlobals(infile):
	infile.write('//This program generated by a Python script.\n')
	infile.write('#include <stdio.h>\n')
	infile.write('#define lprintf for(int i = 0; i < level; i++) printf("  "); printf\n')
	infile.write('\nint level = 0;\n\n');

def writePrototypes(infile, numfns):
	infile.write('\n')
	for i in range(numfns):
		infile.write('int %s();\n' % getName(i))
	infile.write('\n')

def writeFunction(name, infile, mincalls, maxcalls, numfns):
	infile.write('int %s() {\n' % name)
	infile.write('\tstatic int called = -1;\n')
	infile.write('\tcalled++;\n')
	infile.write('\tlevel++;\n')
	infile.write('\tlprintf("Called \\033[32m%s\\033[0m.\\n");\n' % name);
	infile.write('\tif (!called) {\n')
	for i in range(random.randrange(mincalls, maxcalls)):
		infile.write('\t\t%s();\n' %getName(random.randrange(numfns)))
	infile.write('\t}\n')
	infile.write('\tlevel--;\n')
	infile.write('\treturn 0;\n')
	infile.write('}\n\n')

def generateFile(numFns, mincalls, maxcalls, iden, prefix):
	filename = prefix + '_' + str(int(time.time())) + str(iden) + '.c'
	with open(filename, 'w') as infile:
		writeGlobals(infile)
		writePrototypes(infile, numFns)
		for i in range(numFns):
			writeFunction(getName(i), infile, mincalls, maxcalls, numFns)
		writeFunction("main", infile, mincalls, maxcalls, numFns)

def main():
	if len(sys.argv) > 1 and sys.argv[1] == '-h':
		usage()
		exit()
	if len(sys.argv) < 6:
		print 'Not enough arguments.'
		sys.exit()
	numfiles = int(sys.argv[1])
	mincalls = int(sys.argv[4])
	maxcalls = int(sys.argv[5])
	prefix = 'function_calls' if len(sys.argv) == 6 else sys.argv[6]
	for i in range(numfiles):
		numfns = random.randrange(int(sys.argv[2]), int(sys.argv[3]))
		generateFile(numfns, mincalls, maxcalls, i, prefix)
	print 'File writing complete.'

if __name__ == '__main__':
	main()
